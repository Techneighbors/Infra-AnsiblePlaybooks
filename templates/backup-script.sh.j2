#!/bin/bash
# Homelab Backup Script
# Generated by Ansible

set -euo pipefail

# Load environment variables
source /var/lib/backup/.env

# Logging setup
LOG_FILE="/var/log/backup/backup-$(date +%Y%m%d).log"
exec 1> >(tee -a "$LOG_FILE")
exec 2>&1

echo "=== Backup started at $(date) ==="

# Pre-backup checks
if [[ ! -d "$RESTIC_REPOSITORY" ]]; then
    echo "ERROR: Repository directory does not exist: $RESTIC_REPOSITORY"
    exit 1
fi

if [[ ! -f "$BACKUP_EXCLUDE" ]]; then
    echo "WARNING: Exclude file not found: $BACKUP_EXCLUDE"
    BACKUP_EXCLUDE=""
fi

# Function to run restic commands
run_restic() {
    /usr/local/bin/restic "$@"
}

# Backup function
perform_backup() {
    echo "Starting backup of directories: $BACKUP_DIRS"
    
    local backup_args=(
        backup
        $BACKUP_DIRS
        --tag "automated,homelab"
        --hostname "{{ ansible_hostname }}"
    )
    
    if [[ -n "$BACKUP_EXCLUDE" ]]; then
        backup_args+=(--exclude-file="$BACKUP_EXCLUDE")
    fi
    
    if run_restic "${backup_args[@]}"; then
        echo "Backup completed successfully"
        return 0
    else
        echo "ERROR: Backup failed"
        return 1
    fi
}

# Cleanup function
cleanup_old_snapshots() {
    echo "Cleaning up old snapshots with policy: $RETENTION_POLICY"
    
    if run_restic forget $RETENTION_POLICY --prune; then
        echo "Cleanup completed successfully"
        return 0
    else
        echo "WARNING: Cleanup failed"
        return 1
    fi
}

# Health check function
health_check() {
    echo "Performing repository health check..."
    
    if run_restic check; then
        echo "Repository health check passed"
        return 0
    else
        echo "WARNING: Repository health check failed"
        return 1
    fi
}

# Main execution
main() {
    local exit_code=0
    
    # Perform backup
    if ! perform_backup; then
        exit_code=1
    fi
    
    # Cleanup old snapshots
    if ! cleanup_old_snapshots; then
        exit_code=1
    fi
    
    # Periodic health check (weekly)
    if [[ $(date +%u) -eq 7 ]]; then  # Sunday
        if ! health_check; then
            exit_code=1
        fi
    fi
    
    # Repository stats
    echo "=== Repository Statistics ==="
    run_restic stats --mode raw-data || true
    
    echo "=== Backup completed at $(date) with exit code: $exit_code ==="
    
    # Send notification if configured
    if command -v mail >/dev/null 2>&1 && [[ -n "${NOTIFICATION_EMAIL:-}" ]]; then
        if [[ $exit_code -eq 0 ]]; then
            echo "Backup completed successfully on {{ ansible_hostname }}" | mail -s "Backup Success" "$NOTIFICATION_EMAIL"
        else
            echo "Backup failed on {{ ansible_hostname }}. Check logs at $LOG_FILE" | mail -s "Backup Failed" "$NOTIFICATION_EMAIL"
        fi
    fi
    
    return $exit_code
}

# Run main function
main "$@" 