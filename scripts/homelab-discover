#!/bin/bash
# Homelab Discovery Wrapper Script
# Provides easy commands for inventory management

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DISCOVERY_SCRIPT="$SCRIPT_DIR/dynamic_inventory.py"
CONFIG_FILE="$PROJECT_ROOT/config/discovery.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Help function
show_help() {
    cat << EOF
🏠 Homelab Discovery Tool

USAGE:
    $(basename "$0") <command> [options]

COMMANDS:
    scan                 Scan networks and display found hosts
    save [file]         Save discovered inventory to file
    update              Update static inventory with latest discoveries
    report              Generate HTML discovery report
    config              Edit discovery configuration
    status              Show current inventory status
    monitor             Monitor for inventory changes
    setup               Initial setup and configuration
    help                Show this help message

EXAMPLES:
    # Quick network scan
    $(basename "$0") scan

    # Save inventory to custom file
    $(basename "$0") save inventory/production.yml

    # Update default inventory
    $(basename "$0") update

    # Generate HTML report
    $(basename "$0") report

    # Monitor for changes
    $(basename "$0") monitor

CONFIGURATION:
    Edit: $CONFIG_FILE

FILES:
    Discovery script: $DISCOVERY_SCRIPT
    Default inventory: $PROJECT_ROOT/inventory/discovered-hosts.yml
    Reports: $PROJECT_ROOT/inventory/backups/

EOF
}

# Check if discovery script exists
check_dependencies() {
    if [[ ! -f "$DISCOVERY_SCRIPT" ]]; then
        print_error "Discovery script not found: $DISCOVERY_SCRIPT"
        exit 1
    fi

    if ! command -v python3 >/dev/null 2>&1; then
        print_error "Python 3 is required but not installed"
        exit 1
    fi

    if ! python3 -c "import yaml" 2>/dev/null; then
        print_warning "PyYAML not installed. Installing..."
        pip3 install pyyaml || {
            print_error "Failed to install PyYAML"
            exit 1
        }
    fi
}

# Network scan
cmd_scan() {
    print_header "Network Discovery Scan"
    print_status "Scanning configured networks for hosts..."
    
    python3 "$DISCOVERY_SCRIPT" --list --config "$CONFIG_FILE" | jq '.' 2>/dev/null || {
        python3 "$DISCOVERY_SCRIPT" --list --config "$CONFIG_FILE"
    }
}

# Save inventory
cmd_save() {
    local output_file="${1:-inventory/discovered-hosts.yml}"
    
    print_header "Saving Inventory"
    print_status "Discovering hosts and saving to: $output_file"
    
    python3 "$DISCOVERY_SCRIPT" --save "$output_file" --config "$CONFIG_FILE"
    
    if [[ -f "$output_file" ]]; then
        print_status "Inventory saved successfully!"
        print_status "Found $(grep -c 'ansible_host:' "$output_file" 2>/dev/null || echo 0) hosts"
    else
        print_error "Failed to save inventory"
        exit 1
    fi
}

# Update default inventory
cmd_update() {
    print_header "Updating Default Inventory"
    
    local inventory_file="$PROJECT_ROOT/inventory/discovered-hosts.yml"
    local backup_dir="$PROJECT_ROOT/inventory/backups"
    
    # Create backup directory
    mkdir -p "$backup_dir"
    
    # Backup existing inventory
    if [[ -f "$inventory_file" ]]; then
        local backup_file="$backup_dir/discovered-hosts-$(date +%Y%m%d-%H%M%S).yml"
        cp "$inventory_file" "$backup_file"
        print_status "Backed up existing inventory to: $backup_file"
    fi
    
    # Update inventory
    cmd_save "$inventory_file"
}

# Generate HTML report
cmd_report() {
    print_header "Generating Discovery Report"
    
    local playbook="$PROJECT_ROOT/playbooks/inventory-management.yml"
    
    if [[ -f "$playbook" ]]; then
        print_status "Running inventory management playbook..."
        cd "$PROJECT_ROOT"
        ansible-playbook "$playbook" --tags report
    else
        print_error "Inventory management playbook not found: $playbook"
        exit 1
    fi
}

# Edit configuration
cmd_config() {
    print_header "Editing Discovery Configuration"
    
    local editor="${EDITOR:-nano}"
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        print_status "Creating default configuration..."
        mkdir -p "$(dirname "$CONFIG_FILE")"
        cat > "$CONFIG_FILE" << 'EOF'
networks:
  - "192.168.1.0/24"
ansible_user: "admin"
timeout: 3
max_workers: 50
EOF
    fi
    
    print_status "Opening configuration in $editor..."
    "$editor" "$CONFIG_FILE"
}

# Show status
cmd_status() {
    print_header "Inventory Status"
    
    local inventory_file="$PROJECT_ROOT/inventory/discovered-hosts.yml"
    
    if [[ -f "$inventory_file" ]]; then
        print_status "Inventory file: $inventory_file"
        print_status "Last modified: $(stat -c %y "$inventory_file" 2>/dev/null || stat -f %Sm "$inventory_file")"
        print_status "Total hosts: $(grep -c 'ansible_host:' "$inventory_file" 2>/dev/null || echo 0)"
        
        echo
        print_status "Groups found:"
        grep -E '^[a-zA-Z_][a-zA-Z0-9_]*:$' "$inventory_file" 2>/dev/null | sed 's/:$//' | grep -v '_meta\|all' | sort || echo "  None"
    else
        print_warning "No inventory file found. Run 'update' to create one."
    fi
    
    echo
    print_status "Configuration: $CONFIG_FILE"
    if [[ -f "$CONFIG_FILE" ]]; then
        print_status "Networks configured: $(grep -c '^\s*-' "$CONFIG_FILE" 2>/dev/null || echo 0)"
    else
        print_warning "No configuration file found. Run 'config' to create one."
    fi
}

# Monitor for changes
cmd_monitor() {
    print_header "Monitoring Inventory Changes"
    
    local monitor_script="/usr/local/bin/inventory-change-monitor.sh"
    
    if [[ -f "$monitor_script" ]]; then
        print_status "Running inventory change monitor..."
        "$monitor_script"
    else
        print_warning "Monitor script not found. Run the inventory-management playbook first."
        
        # Fallback: simple monitoring
        print_status "Using built-in monitor..."
        local inventory_file="$PROJECT_ROOT/inventory/discovered-hosts.yml"
        local last_checksum=""
        
        while true; do
            if [[ -f "$inventory_file" ]]; then
                local current_checksum
                current_checksum=$(md5sum "$inventory_file" 2>/dev/null | cut -d' ' -f1)
                
                if [[ "$current_checksum" != "$last_checksum" ]]; then
                    print_status "Inventory change detected at $(date)"
                    last_checksum="$current_checksum"
                fi
            fi
            
            sleep 60
        done
    fi
}

# Setup
cmd_setup() {
    print_header "Initial Setup"
    
    print_status "Setting up homelab discovery..."
    
    # Create directories
    mkdir -p "$PROJECT_ROOT/inventory/backups"
    mkdir -p "$PROJECT_ROOT/config"
    
    # Make scripts executable
    chmod +x "$DISCOVERY_SCRIPT"
    chmod +x "$0"
    
    # Create default config if needed
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cmd_config
    fi
    
    # Test discovery
    print_status "Testing discovery..."
    python3 "$DISCOVERY_SCRIPT" --config "$CONFIG_FILE" --list >/dev/null 2>&1 && {
        print_status "Discovery test passed!"
    } || {
        print_warning "Discovery test failed. Check configuration."
    }
    
    print_status "Setup complete!"
    echo
    print_status "Next steps:"
    echo "  1. Review/edit configuration: $(basename "$0") config"
    echo "  2. Run initial scan: $(basename "$0") scan"
    echo "  3. Save inventory: $(basename "$0") update"
}

# Main command dispatch
main() {
    case "${1:-help}" in
        scan)
            check_dependencies
            cmd_scan
            ;;
        save)
            check_dependencies
            cmd_save "${2:-}"
            ;;
        update)
            check_dependencies
            cmd_update
            ;;
        report)
            check_dependencies
            cmd_report
            ;;
        config)
            cmd_config
            ;;
        status)
            cmd_status
            ;;
        monitor)
            check_dependencies
            cmd_monitor
            ;;
        setup)
            cmd_setup
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 