---
- name: Update and upgrade apt packages
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Allow customization of upgrade type
    upgrade_type: "{{ apt_upgrade_type | default('safe') }}"
    # Allow disabling of autoremove
    autoremove_enabled: "{{ apt_autoremove | default(true) }}"
    # Allow disabling of autoclean
    autoclean_enabled: "{{ apt_autoclean | default(true) }}"

  pre_tasks:
    - name: Check if system uses APT package manager
      ansible.builtin.fail:
        msg: "This playbook only supports APT-based systems (Debian/Ubuntu)"
      when: ansible_pkg_mgr != 'apt'
      tags: always

  tasks:
    - name: Update APT package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600 # Only update if cache is older than 1 hour
      register: apt_update_result
      retries: 3
      delay: 10
      until: apt_update_result is succeeded
      tags:
        - update
        - packages

    - name: Get list of upgradeable packages
      ansible.builtin.shell: |
        apt list --upgradeable 2>/dev/null | grep -v '^Listing' | wc -l
      register: upgradeable_packages
      changed_when: false
      failed_when: false
      tags:
        - update
        - packages
        - info

    - name: Display number of upgradeable packages
      ansible.builtin.debug:
        msg: "{{ upgradeable_packages.stdout }} packages available for upgrade"
      tags:
        - update
        - packages
        - info

    - name: Upgrade APT packages (safe upgrade)
      ansible.builtin.apt:
        upgrade: safe
        autoremove: "{{ autoremove_enabled }}"
        autoclean: "{{ autoclean_enabled }}"
      register: apt_upgrade_result
      when: upgrade_type == 'safe'
      tags:
        - upgrade
        - packages
        - safe

    - name: Upgrade APT packages (full upgrade)
      ansible.builtin.apt:
        upgrade: full
        autoremove: "{{ autoremove_enabled }}"
        autoclean: "{{ autoclean_enabled }}"
      register: apt_upgrade_result
      when: upgrade_type == 'full'
      tags:
        - upgrade
        - packages
        - full

    - name: Upgrade APT packages (dist upgrade)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: "{{ autoremove_enabled }}"
        autoclean: "{{ autoclean_enabled }}"
      register: apt_upgrade_result
      when: upgrade_type == 'dist'
      tags:
        - upgrade
        - packages
        - dist

    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      tags:
        - reboot
        - check

    - name: Display reboot requirement status
      ansible.builtin.debug:
        msg: "{{ 'Reboot required after package updates' if reboot_required_file.stat.exists else 'No reboot required' }}"
      tags:
        - reboot
        - info

    - name: Display upgrade summary
      ansible.builtin.debug:
        var: apt_upgrade_result
      when: apt_upgrade_result is defined
      tags:
        - info
        - summary

  handlers:
    - name: Reboot system if required
      ansible.builtin.reboot:
        reboot_timeout: 300
        test_command: uptime
      when: reboot_required_file.stat.exists
      listen: "reboot system"
