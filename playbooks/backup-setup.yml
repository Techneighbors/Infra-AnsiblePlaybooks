---
- name: Setup automated backup solution with restic
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Backup configuration
    backup_user: "{{ backup_service_user | default('backup') }}"
    backup_directories:
      - /home
      - /etc
      - /var/log
      - /opt/docker
    backup_exclude_patterns:
      - "*.tmp"
      - "*.cache"
      - "*/node_modules/*"
      - "*/venv/*"
      - "*/.git/*"

    # Restic configuration
    restic_version: "{{ restic_release_version | default('0.16.3') }}"
    restic_repository: "{{ backup_repository | default('/backup/restic-repo') }}"
    restic_password: "{{ backup_password | default('change-me-please') }}"

    # Schedule configuration
    backup_schedule: "{{ backup_cron_schedule | default('0 2 * * *') }}" # 2 AM daily
    backup_retention: "{{ backup_keep_policy | default('--keep-daily 7 --keep-weekly 4 --keep-monthly 6') }}"

  tasks:
    - name: Create backup user
      ansible.builtin.user:
        name: "{{ backup_user }}"
        system: true
        shell: /bin/bash
        home: /var/lib/backup
        create_home: true
      tags: setup

    - name: Create backup directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        mode: "0750"
      loop:
        - /var/lib/backup
        - /var/log/backup
        - "{{ restic_repository | dirname }}"
      tags: setup

    - name: Download and install restic
      ansible.builtin.get_url:
        url: "https://github.com/restic/restic/releases/download/v{{ restic_version }}/restic_{{ restic_version }}_linux_amd64.bz2"
        dest: /tmp/restic.bz2
        mode: "0644"
      tags: install

    - name: Extract restic binary
      ansible.builtin.shell: |
        bunzip2 < /tmp/restic.bz2 > /usr/local/bin/restic
        chmod +x /usr/local/bin/restic
        chown root:root /usr/local/bin/restic
      args:
        creates: /usr/local/bin/restic
      tags: install

    - name: Create restic repository
      ansible.builtin.shell: |
        export RESTIC_REPOSITORY="{{ restic_repository }}"
        export RESTIC_PASSWORD="{{ restic_password }}"
        /usr/local/bin/restic init
      args:
        creates: "{{ restic_repository }}/config"
      become_user: "{{ backup_user }}"
      tags: repository

    - name: Create backup script
      ansible.builtin.template:
        src: backup-script.sh.j2
        dest: /usr/local/bin/homelab-backup.sh
        mode: "0755"
        owner: root
        group: root
      tags: script

    - name: Create backup exclude file
      ansible.builtin.copy:
        content: |
          {% for pattern in backup_exclude_patterns %}
          {{ pattern }}
          {% endfor %}
        dest: /var/lib/backup/exclude.txt
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        mode: "0644"
      tags: config

    - name: Create backup environment file
      ansible.builtin.copy:
        content: |
          RESTIC_REPOSITORY="{{ restic_repository }}"
          RESTIC_PASSWORD="{{ restic_password }}"
          BACKUP_DIRS="{{ backup_directories | join(' ') }}"
          BACKUP_EXCLUDE="/var/lib/backup/exclude.txt"
          RETENTION_POLICY="{{ backup_retention }}"
        dest: /var/lib/backup/.env
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        mode: "0600"
      tags: config

    - name: Create backup log rotation
      ansible.builtin.copy:
        content: |
          /var/log/backup/*.log {
            daily
            rotate 30
            compress
            missingok
            notifempty
            create 644 {{ backup_user }} {{ backup_user }}
          }
        dest: /etc/logrotate.d/backup
        mode: "0644"
      tags: config

    - name: Schedule backup cron job
      ansible.builtin.cron:
        name: "Homelab automated backup"
        minute: "{{ backup_schedule.split()[1] }}"
        hour: "{{ backup_schedule.split()[2] }}"
        day: "{{ backup_schedule.split()[3] }}"
        month: "{{ backup_schedule.split()[4] }}"
        weekday: "{{ backup_schedule.split()[5] if backup_schedule.split()|length > 5 else '*' }}"
        job: "/usr/local/bin/homelab-backup.sh >> /var/log/backup/backup.log 2>&1"
        user: "{{ backup_user }}"
      tags: schedule

    - name: Create backup monitoring script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Backup monitoring script

          RESTIC_REPOSITORY="{{ restic_repository }}"
          RESTIC_PASSWORD="{{ restic_password }}"

          echo "=== Backup Repository Status ==="
          /usr/local/bin/restic snapshots --compact

          echo -e "\n=== Repository Statistics ==="
          /usr/local/bin/restic stats

          echo -e "\n=== Last Backup Log ==="
          tail -n 20 /var/log/backup/backup.log
        dest: /usr/local/bin/backup-status.sh
        mode: "0755"
      tags: monitoring

    - name: Test initial backup (dry run)
      ansible.builtin.shell: |
        source /var/lib/backup/.env
        /usr/local/bin/restic --repository="$RESTIC_REPOSITORY" --password="$RESTIC_PASSWORD" \
          backup $BACKUP_DIRS --exclude-file="$BACKUP_EXCLUDE" --dry-run
      become_user: "{{ backup_user }}"
      register: backup_test
      changed_when: false
      tags: test

    - name: Display backup test results
      ansible.builtin.debug:
        msg: "Backup test completed successfully"
      when: backup_test.rc == 0
      tags: test

  post_tasks:
    - name: Create backup documentation
      ansible.builtin.copy:
        content: |
          # Homelab Backup System

          ## Configuration
          - Repository: {{ restic_repository }}
          - Backup User: {{ backup_user }}
          - Schedule: {{ backup_schedule }}
          - Retention: {{ backup_retention }}

          ## Commands

          ### Run manual backup:
          sudo -u {{ backup_user }} /usr/local/bin/homelab-backup.sh

          ### Check backup status:
          sudo /usr/local/bin/backup-status.sh

          ### List snapshots:
          sudo -u {{ backup_user }} restic -r {{ restic_repository }} snapshots

          ### Restore files:
          sudo -u {{ backup_user }} restic -r {{ restic_repository }} restore <snapshot-id> --target /tmp/restore

          ### Mount repository:
          sudo -u {{ backup_user }} restic -r {{ restic_repository }} mount /mnt/backup

          ## Log Files
          - Backup logs: /var/log/backup/backup.log
          - System logs: journalctl -u cron
        dest: /var/lib/backup/README.md
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        mode: "0644"
      tags: documentation
